version: '3.8'

# Production Docker Compose configuration
# Usage: docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # MongoDB Database - Production optimized
  mongodb:
    image: mongo:7.0
    container_name: resume-builder-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME:-resume_builder}
    volumes:
      - mongodb_data_prod:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - resume-builder-network-prod
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache - Production optimized
  redis:
    image: redis:7.2-alpine
    container_name: resume-builder-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    networks:
      - resume-builder-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API - Production optimized
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: resume-builder-backend-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database
      MONGODB_URL: mongodb://${MONGODB_ROOT_USERNAME:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${DATABASE_NAME:-resume_builder}?authSource=admin
      DATABASE_NAME: ${DATABASE_NAME:-resume_builder}
      
      # Authentication
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-3.5-turbo}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Application
      PORT: 8000
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      
      # CORS - Update with your production domain
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://yourdomain.com,https://www.yourdomain.com}
      
      # Production optimizations
      WORKERS: 4
      LOG_LEVEL: info
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - resume-builder-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Frontend Application - Production optimized
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: resume-builder-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-https://yourdomain.com/api}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - resume-builder-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: resume-builder-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - resume-builder-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  resume-builder-network-prod:
    driver: bridge
